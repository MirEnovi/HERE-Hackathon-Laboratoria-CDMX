{"version":3,"sources":["assets/school.png","components/Geolocation.jsx","components/SignIn.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Geolocation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","funcionFetch","lat","lng","url","concat","setState","state","value","error","_this2","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","message","event","target","_this3","react_default","a","createElement","Fragment","className","onChange","changeLocation","src","alt","Component","SignIn","Imagen","lib","type","label","waves","App","components_SignIn","components_Geolocation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2OCmDzBC,cAhDd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAwBPQ,aAAe,SAACC,EAAKC,GACpB,IAAMC,EAAG,mHAAAC,OAAqHH,EAArH,SAAAG,OAAgIF,EAAhI,cAIT,OAHAT,EAAKY,SAAS,CACbF,QAEMA,GA5BPV,EAAKa,MAAQ,CACZC,MAAO,MACPC,MAAO,KACPL,IAAK,MALYV,oFAQE,IAAAgB,EAAAb,KAChBc,UAAUC,aACbD,UAAUC,YAAYC,mBACrB,SAACC,GACAJ,EAAKT,aAAaa,EAASC,OAAOC,SAAUF,EAASC,OAAOE,WAC5DP,EAAKJ,SAAS,CACbE,MAAOM,EAASC,OAAOC,SAAW,IAAMF,EAASC,OAAOE,UACxDR,MAAO,QAGT,SAACA,GAAD,OAAWC,EAAKJ,SACf,CAACG,MAAOA,EAAMS,mDAcFC,GACftB,KAAKS,SAAS,CACbE,MAAOW,EAAMC,OAAOZ,yCAGd,IAAAa,EAAAxB,KACP,OACCyB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACCH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,YAAYlB,MAAOX,KAAKU,MAAMC,MAAOmB,SAAU,SAAAR,GAAK,OAAEE,EAAKO,eAAeT,MAC3FG,EAAAC,EAAAC,cAAA,OAAKK,IAAOhC,KAAKU,MAAMH,IAAK0B,IAAI,gBA3CVC,8CCmBXC,EAhBA,WACb,OACEV,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASG,IAAKI,MAC7BX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAACU,EAAA,MAAD,CAAOR,UAAU,mBAAmBS,KAAK,QAAQC,MAAM,UACvDd,EAAAC,EAAAC,cAACU,EAAA,MAAD,CAAOR,UAAU,SAASS,KAAK,WAAWC,MAAM,aAChDd,EAAAC,EAAAC,cAACU,EAAA,OAAD,CAAQG,MAAM,SAAd,SAGAf,EAAAC,EAAAC,cAAA,+CCGOc,mLAXX,OACEhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAGbJ,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,cAPUT,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6efd0009.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/school.bb2d5277.png\";","import React, {Component} from 'react';\r\n\r\nclass Geolocation extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tvalue: '0,0',\r\n\t\t\terror: null,\r\n\t\t\turl: null\r\n\t\t}\r\n\t}\r\n\tcomponentWillMount() {\r\n\t\tif (navigator.geolocation) {\r\n\t\t\tnavigator.geolocation.getCurrentPosition(\r\n\t\t\t\t(position) => {\r\n\t\t\t\t\tthis.funcionFetch(position.coords.latitude, position.coords.longitude);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tvalue: position.coords.latitude + ',' + position.coords.longitude,\r\n\t\t\t\t\t\terror: null,\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\t(error) => this.setState(\r\n\t\t\t\t\t{error: error.message}\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfuncionFetch = (lat, lng) => {\r\n\t\tconst url= `https://image.maps.api.here.com/mia/1.6/mapview?app_id=F2NFi480TAeaCU2fjGmC&app_code=DvU41ZrLHlIVBDtOruPEqg&lat=${lat}&lon=${lng}&vt=0&z=14`;\r\n\t\tthis.setState({\r\n\t\t\turl\r\n\t\t})\r\n\t\treturn url;\r\n\t}\r\n\r\n\tchangeLocation (event) {\r\n\t\tthis.setState({\r\n\t\t\tvalue: event.target.value\r\n\t\t})\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<input className='input-geo' value={this.state.value} onChange={event=>this.changeLocation(event)}/>\r\n\t\t\t\t<img src = {this.state.url} alt='map'/>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n\r\n}\r\nexport default Geolocation;","import React from \"react\";\r\nimport { Button, Icon, Input } from \"react-materialize\";\r\nimport Imagen from \"../assets/school.png\";\r\n// import {Link} from 'react-router-dom'\r\n\r\nconst SignIn = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <img className=\"school\" src={Imagen} />\r\n      <div className=\"form\">\r\n        <Input className=\"col s3 offset-s1\" type=\"email\" label=\"Email\" />\r\n        <Input className=\"col s3\" type=\"password\" label=\"password\" />\r\n        <Button waves=\"light\">\r\n          Login\r\n        </Button>\r\n        <p>¿Olvidaste tu contraseña?</p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import React, { Component } from 'react';\r\nimport Geolocation from './components/Geolocation';\r\nimport './App.css';\r\nimport SignIn from './components/SignIn';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* <header className=\"App-header\">\r\n        </header> */}\r\n        <SignIn/>\r\n        <Geolocation/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}